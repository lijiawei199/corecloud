/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (2.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bananalab.snow.api;

import com.bananalab.snow.api.model.BaseVO;
import com.bananalab.snow.api.model.Dealflow;
import com.bananalab.snow.api.model.FeedBackVO;
import com.bananalab.snow.api.model.FileUploadVOInfo;
import java.util.List;
import com.bananalab.snow.api.model.MessageVO;
import com.bananalab.snow.api.model.Msghall;
import com.bananalab.snow.api.model.Ordermsglist;
import com.bananalab.snow.api.model.Phone;
import com.bananalab.snow.api.model.RemarkVO;
import com.bananalab.snow.api.model.Remarklist;
import org.springframework.core.io.Resource;
import com.bananalab.snow.api.model.UserVO;
import com.bananalab.snow.api.model.Userinfo;
import com.bananalab.snow.api.model.WithdrawVO;
import com.bananalab.snow.api.model.Withdrawdetail;
import com.bananalab.snow.api.model.Withdrawmsglist;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-09T14:17:07.921+08:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "", nickname = "bindPhone", notes = "绑定手机号", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/phone",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> bindPhone(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "feedBack"  )  @Valid @RequestBody Phone phone);


    @ApiOperation(value = "", nickname = "changeinfo", notes = "用户修改个人信息", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/changeinfo",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> changeinfo(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "changeinfo"  )  @Valid @RequestBody UserVO user);


    @ApiOperation(value = "", nickname = "dealflow", notes = "交易流水", response = Dealflow.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Dealflow.class) })
    @RequestMapping(value = "/user/dealflow",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Dealflow> dealflow(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token);


    @ApiOperation(value = "", nickname = "feedback", notes = "用户意见反馈", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/feedback",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> feedback(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "feedBack"  )  @Valid @RequestBody FeedBackVO feedBack);


    @ApiOperation(value = "", nickname = "msghall", notes = "信息列表大厅", response = Msghall.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Msghall.class) })
    @RequestMapping(value = "/user/msghall",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Msghall> msghall(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token);


    @ApiOperation(value = "", nickname = "ordermsglist", notes = "订单信息列表", response = Ordermsglist.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Ordermsglist.class) })
    @RequestMapping(value = "/user/ordermsglist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Ordermsglist> ordermsglist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "消息类型 \"退款\" 或者 \"订单通知\"") @Valid @RequestParam(value = "type", required = false) String type);


    @ApiOperation(value = "", nickname = "readmsg", notes = "阅读消息", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/readmsg",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> readmsg(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "user"  )  @Valid @RequestBody List<MessageVO> msglist);


    @ApiOperation(value = "", nickname = "remarklist", notes = "用户收到评价", response = Remarklist.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Remarklist.class) })
    @RequestMapping(value = "/user/remarklist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Remarklist> remarklist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token);


    @ApiOperation(value = "", nickname = "remarkorder", notes = "用户评价订单", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/remarkorder",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> remarkorder(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "remarkVO"  )  @Valid @RequestBody RemarkVO remark);


    @ApiOperation(value = "", nickname = "uploadFile", notes = "文件上传", response = FileUploadVOInfo.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = FileUploadVOInfo.class) })
    @RequestMapping(value = "/user/fileUpload",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<FileUploadVOInfo> uploadFile(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @ApiOperation(value = "", nickname = "userinfo", notes = "用户详情", response = Userinfo.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Userinfo.class) })
    @RequestMapping(value = "/user/userinfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Userinfo> userinfo(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token);


    @ApiOperation(value = "", nickname = "withdrawal", notes = "用户提现申请", response = BaseVO.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = BaseVO.class) })
    @RequestMapping(value = "/user/withdrawalapply",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BaseVO> withdrawal(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "user"  )  @Valid @RequestBody WithdrawVO withdraw);


    @ApiOperation(value = "", nickname = "withdrawdetail", notes = "提现申请详情", response = Withdrawdetail.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Withdrawdetail.class) })
    @RequestMapping(value = "/user/withdrawdetail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Withdrawdetail> withdrawdetail(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "withdrawId") @Valid @RequestParam(value = "withdrawId", required = false) Integer withdrawId);


    @ApiOperation(value = "", nickname = "withdrawmsglist", notes = "提现信息列表", response = Withdrawmsglist.class, tags={ "用户", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Withdrawmsglist.class) })
    @RequestMapping(value = "/user/withdrawmsglist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Withdrawmsglist> withdrawmsglist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token);

}
