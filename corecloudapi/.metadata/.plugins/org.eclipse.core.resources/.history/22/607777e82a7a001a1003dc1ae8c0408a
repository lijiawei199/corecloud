package com.bananalab.snow.api;

import com.bananalab.snow.api.model.BaseVO;
import com.bananalab.snow.api.model.Fieldlist;
import com.bananalab.snow.api.model.Fieldusers;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-09T14:17:07.921+08:00")

@Controller
@RequestMapping("${openapi.Qpk API.base-path:/snow}")
public class FieldsApiController implements FieldsApi {

    private final FieldsApiDelegate delegate;

    public FieldsApiController(@org.springframework.beans.factory.annotation.Autowired(required = false) FieldsApiDelegate delegate) {
        this.delegate = delegate;
    }

    public ResponseEntity<BaseVO> addstar(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "region") @Valid @RequestParam(value = "fieldId", required = false) String fieldId) {
        return delegate.addstar(token, fieldId);
    }

    public ResponseEntity<BaseVO> cancelstar(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "region") @Valid @RequestParam(value = "fieldId", required = false) String fieldId) {
        return delegate.cancelstar(token, fieldId);
    }

    public ResponseEntity<Fieldlist> fieldStar(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "latitude", required = true) Double latitude,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "longitude", required = true) Double longitude,@ApiParam(value = "region") @Valid @RequestParam(value = "region", required = false) String region) {
        return delegate.fieldStar(token, latitude, longitude, region);
    }

    public ResponseEntity<Fieldlist> fields(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "region", required = true) String region,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "latitude", required = true) Double latitude,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "longitude", required = true) Double longitude) {
        return delegate.fields(token, region, latitude, longitude);
    }

    public ResponseEntity<Fieldusers> fieldusers(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "fieldId") @Valid @RequestParam(value = "fieldId", required = false) Integer fieldId) {
        return delegate.fieldusers(token, fieldId);
    }

    public ResponseEntity<Fieldlist> searchfield(@ApiParam(value = "region") @Valid @RequestParam(value = "fieldName", required = false) String fieldName) {
        return delegate.searchfield(fieldName);
    }

}
