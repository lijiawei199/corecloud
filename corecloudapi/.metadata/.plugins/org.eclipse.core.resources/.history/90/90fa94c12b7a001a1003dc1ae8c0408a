/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (2.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bananalab.corecloud.api;

import com.bananalab.corecloud.api.model.Cleanerlist;
import com.bananalab.corecloud.api.model.Elevatordetail;
import com.bananalab.corecloud.api.model.Equipdetail;
import com.bananalab.corecloud.api.model.Equiplist;
import com.bananalab.corecloud.api.model.Guardlist;
import com.bananalab.corecloud.api.model.Hotchart;
import com.bananalab.corecloud.api.model.Monitordetail;
import com.bananalab.corecloud.api.model.StoreList;
import com.bananalab.corecloud.api.model.TotalData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-09T14:30:40.698+08:00")

@Api(value = "map", description = "the map API")
public interface MapApi {

    @ApiOperation(value = "", nickname = "cleanerlist", notes = "获取清洁员工列表", response = Cleanerlist.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Cleanerlist.class) })
    @RequestMapping(value = "/map/cleanerlist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cleanerlist> cleanerlist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor);


    @ApiOperation(value = "", nickname = "elevatordetail", notes = "获取地图页电梯信息", response = Elevatordetail.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Elevatordetail.class) })
    @RequestMapping(value = "/map/elevatordetail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Elevatordetail> elevatordetail(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type);


    @ApiOperation(value = "", nickname = "equipdetail", notes = "获取地图页设备信息", response = Equipdetail.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Equipdetail.class) })
    @RequestMapping(value = "/map/equipdetail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Equipdetail> equipdetail(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "fid", required = true) String fid);


    @ApiOperation(value = "", nickname = "equiplist", notes = "获取地图页设备列表 600015(安防) 600014(电梯) 600013(识别器)", response = Equiplist.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Equiplist.class) })
    @RequestMapping(value = "/map/equiplist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Equiplist> equiplist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor);


    @ApiOperation(value = "", nickname = "guardlist", notes = "获取保安员工列表", response = Guardlist.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Guardlist.class) })
    @RequestMapping(value = "/map/guardlist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Guardlist> guardlist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor);


    @ApiOperation(value = "", nickname = "hotchart", notes = "获取地图页热力图数据 0(客流) 1(坪效)", response = Hotchart.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Hotchart.class) })
    @RequestMapping(value = "/map/hotchart",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Hotchart> hotchart(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) Integer floor);


    @ApiOperation(value = "", nickname = "monitordetail", notes = "获取地图页监控信息", response = Monitordetail.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Monitordetail.class) })
    @RequestMapping(value = "/map/monitordetail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Monitordetail> monitordetail(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type);


    @ApiOperation(value = "", nickname = "recognizeretail", notes = "获取地图页监控信息", response = Elevatordetail.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Elevatordetail.class) })
    @RequestMapping(value = "/map/recognizeretail",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Elevatordetail> recognizeretail(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type);


    @ApiOperation(value = "", nickname = "storelist", notes = "获取地图店铺列表", response = StoreList.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = StoreList.class) })
    @RequestMapping(value = "/map/storelist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StoreList> storelist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) Integer type,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor);


    @ApiOperation(value = "", nickname = "totalData", notes = "地图页数据交互", response = TotalData.class, tags={ "地图页数据交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = TotalData.class) })
    @RequestMapping(value = "/map/totalData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TotalData> totalData(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor,@NotNull @ApiParam(value = "0 客流量 1 销售额 2 坪效 3 集客力", required = true) @Valid @RequestParam(value = "type", required = true) String type,@NotNull @ApiParam(value = "-1表示无区分 0 日 1月 2 年", required = true) @Valid @RequestParam(value = "time", required = true) String time);

}
