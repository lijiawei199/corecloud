/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (2.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bananalab.corecloud.api;

import com.bananalab.corecloud.api.model.Brandlist;
import com.bananalab.corecloud.api.model.Equiplist;
import com.bananalab.corecloud.api.model.Flowtop5;
import com.bananalab.corecloud.api.model.Flowtrend;
import com.bananalab.corecloud.api.model.Flowview;
import com.bananalab.corecloud.api.model.Formatdistri;
import com.bananalab.corecloud.api.model.Formatratio;
import com.bananalab.corecloud.api.model.Kpitrend;
import com.bananalab.corecloud.api.model.Kpiview;
import com.bananalab.corecloud.api.model.Marketflowcompare;
import com.bananalab.corecloud.api.model.Storetflowcompare;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-16T11:41:54.491+08:00")

@Api(value = "data", description = "the data API")
public interface DataApi {

    @ApiOperation(value = "", nickname = "brandlist", notes = "品牌列表", response = Brandlist.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Brandlist.class) })
    @RequestMapping(value = "/data/brandlist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Brandlist> brandlist(@NotNull @ApiParam(value = "业态", required = true) @Valid @RequestParam(value = "format", required = true) String format,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor,@NotNull @ApiParam(value = "第几页", required = true) @Valid @RequestParam(value = "page", required = true) Integer page);


    @ApiOperation(value = "", nickname = "flowtop5", notes = "客流量TOP5", response = Flowtop5.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Flowtop5.class) })
    @RequestMapping(value = "/data/flowtop5",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Flowtop5> flowtop5();


    @ApiOperation(value = "", nickname = "flowtrend", notes = "流量趋势（流量概览页下半部分）", response = Flowtrend.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Flowtrend.class) })
    @RequestMapping(value = "/data/flowtrend",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Flowtrend> flowtrend(@NotNull @ApiParam(value = "0 1 2（周|月|年）", required = true) @Valid @RequestParam(value = "timerange", required = true) Integer timerange,@NotNull @ApiParam(value = "sale|flow||plateau|collect|value|trans", required = true) @Valid @RequestParam(value = "data", required = true) String data,@NotNull @ApiParam(value = "fid", required = true) @Valid @RequestParam(value = "fid", required = true) String fid);


    @ApiOperation(value = "", nickname = "flowview", notes = "流量概览页上半部分", response = Flowview.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Flowview.class) })
    @RequestMapping(value = "/data/flowview",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Flowview> flowview();


    @ApiOperation(value = "", nickname = "formatdistri", notes = "业态分布", response = Formatdistri.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Formatdistri.class) })
    @RequestMapping(value = "/data/formatdistri",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Formatdistri> formatdistri();


    @ApiOperation(value = "", nickname = "formatratio", notes = "获取业态占比", response = Formatratio.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Formatratio.class) })
    @RequestMapping(value = "/data/formatratio",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Formatratio> formatratio();


    @ApiOperation(value = "", nickname = "kpitrend", notes = "kpi趋势 返回数据 0 1 2 3 (客流量|平均集客力|销售额|平均坪效)", response = Kpitrend.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Kpitrend.class) })
    @RequestMapping(value = "/data/kpitrend",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Kpitrend> kpitrend();


    @ApiOperation(value = "", nickname = "kpiview", notes = "kpi概览", response = Kpiview.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Kpiview.class) })
    @RequestMapping(value = "/data/kpiview",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Kpiview> kpiview(@NotNull @ApiParam(value = "当次时间", required = true) @Valid @RequestParam(value = "this", required = true) String _this,@NotNull @ApiParam(value = "上次时间", required = true) @Valid @RequestParam(value = "last", required = true) String last);


    @ApiOperation(value = "", nickname = "marketflowcompare", notes = "商场流量对比", response = Marketflowcompare.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Marketflowcompare.class) })
    @RequestMapping(value = "/data/marketflowcompare",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Marketflowcompare> marketflowcompare(@NotNull @ApiParam(value = "开始时间", required = true) @Valid @RequestParam(value = "startDate", required = true) String startDate,@NotNull @ApiParam(value = "结束时间", required = true) @Valid @RequestParam(value = "startTime", required = true) String startTime);


    @ApiOperation(value = "", nickname = "nownotify", notes = "当前提示（实时消息中的消息喇叭）", response = Equiplist.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Equiplist.class) })
    @RequestMapping(value = "/data/nownotify",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Equiplist> nownotify();


    @ApiOperation(value = "", nickname = "storetflowcompare", notes = "商铺流量对比", response = Storetflowcompare.class, tags={ "数据看板", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Storetflowcompare.class) })
    @RequestMapping(value = "/data/storetflowcompare",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Storetflowcompare> storetflowcompare(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) String floor,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "renge", required = true) String renge,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "date", required = true) String date);

}
