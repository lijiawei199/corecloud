package com.bananalab.snow.api;

import com.bananalab.snow.api.model.BaseVO;
import com.bananalab.snow.api.model.Dealflow;
import com.bananalab.snow.api.model.FeedBackVO;
import com.bananalab.snow.api.model.FileUploadVOInfo;
import java.util.List;
import com.bananalab.snow.api.model.MessageVO;
import com.bananalab.snow.api.model.Msghall;
import com.bananalab.snow.api.model.Ordermsglist;
import com.bananalab.snow.api.model.Phone;
import com.bananalab.snow.api.model.RemarkVO;
import com.bananalab.snow.api.model.Remarklist;
import org.springframework.core.io.Resource;
import com.bananalab.snow.api.model.UserVO;
import com.bananalab.snow.api.model.Userinfo;
import com.bananalab.snow.api.model.WithdrawVO;
import com.bananalab.snow.api.model.Withdrawdetail;
import com.bananalab.snow.api.model.Withdrawmsglist;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.*;
import javax.validation.Valid;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-09T14:17:07.921+08:00")

@Controller
@RequestMapping("${openapi.Qpk API.base-path:/snow}")
public class UserApiController implements UserApi {

    private final UserApiDelegate delegate;

    public UserApiController(@org.springframework.beans.factory.annotation.Autowired(required = false) UserApiDelegate delegate) {
        this.delegate = delegate;
    }

    public ResponseEntity<BaseVO> bindPhone(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "feedBack"  )  @Valid @RequestBody Phone phone) {
        return delegate.bindPhone(token, phone);
    }

    public ResponseEntity<BaseVO> changeinfo(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "changeinfo"  )  @Valid @RequestBody UserVO user) {
        return delegate.changeinfo(token, user);
    }

    public ResponseEntity<Dealflow> dealflow(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        return delegate.dealflow(token);
    }

    public ResponseEntity<BaseVO> feedback(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "feedBack"  )  @Valid @RequestBody FeedBackVO feedBack) {
        return delegate.feedback(token, feedBack);
    }

    public ResponseEntity<Msghall> msghall(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        return delegate.msghall(token);
    }

    public ResponseEntity<Ordermsglist> ordermsglist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "消息类型 \"退款\" 或者 \"订单通知\"") @Valid @RequestParam(value = "type", required = false) String type) {
        return delegate.ordermsglist(token, type);
    }

    public ResponseEntity<BaseVO> readmsg(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "user"  )  @Valid @RequestBody List<MessageVO> msglist) {
        return delegate.readmsg(token, msglist);
    }

    public ResponseEntity<Remarklist> remarklist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        return delegate.remarklist(token);
    }

    public ResponseEntity<BaseVO> remarkorder(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "remarkVO"  )  @Valid @RequestBody RemarkVO remark) {
        return delegate.remarkorder(token, remark);
    }

    public ResponseEntity<FileUploadVOInfo> uploadFile(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file) {
        return delegate.uploadFile(file);
    }

    public ResponseEntity<Userinfo> userinfo(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        return delegate.userinfo(token);
    }

    public ResponseEntity<BaseVO> withdrawal(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "user"  )  @Valid @RequestBody WithdrawVO withdraw) {
        return delegate.withdrawal(token, withdraw);
    }

    public ResponseEntity<Withdrawdetail> withdrawdetail(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token,@ApiParam(value = "withdrawId") @Valid @RequestParam(value = "withdrawId", required = false) Integer withdrawId) {
        return delegate.withdrawdetail(token, withdrawId);
    }

    public ResponseEntity<Withdrawmsglist> withdrawmsglist(@ApiParam(value = "" ,required=true) @RequestHeader(value="token", required=true) String token) {
        return delegate.withdrawmsglist(token);
    }

}
