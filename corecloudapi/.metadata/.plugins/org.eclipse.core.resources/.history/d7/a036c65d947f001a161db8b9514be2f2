/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (2.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bananalab.corecloud.api;

import com.bananalab.corecloud.api.model.Potcustlist;
import com.bananalab.corecloud.api.model.Ranklist;
import com.bananalab.corecloud.api.model.StoreList;
import com.bananalab.corecloud.api.model.Storedetails;
import com.bananalab.corecloud.api.model.Translist;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-16T11:41:54.491+08:00")

@Api(value = "store", description = "the store API")
public interface StoreApi {

    @ApiOperation(value = "", nickname = "leaseTime", notes = "店铺租约划分", response = StoreList.class, tags={ "店铺租约划分", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = StoreList.class) })
    @RequestMapping(value = "/store/leaseTime",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StoreList> leaseTime(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) Integer floor);


    @ApiOperation(value = "", nickname = "potcustlist", notes = "店铺意向客户列表", response = Potcustlist.class, tags={ "店铺信息交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Potcustlist.class) })
    @RequestMapping(value = "/store/pot_cust",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Potcustlist> potcustlist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "fid", required = true) String fid);


    @ApiOperation(value = "", nickname = "ranklist", notes = "店铺排行列表", response = Ranklist.class, tags={ "店铺信息交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Ranklist.class) })
    @RequestMapping(value = "/store/ranklist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Ranklist> ranklist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "priority", required = true) String priority,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "time", required = true) String time);


    @ApiOperation(value = "", nickname = "rent", notes = "店铺月租划分", response = StoreList.class, tags={ "店铺月租划分", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = StoreList.class) })
    @RequestMapping(value = "/store/rent",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StoreList> rent(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) Integer floor);


    @ApiOperation(value = "", nickname = "storedetails", notes = "获取店铺详情", response = Storedetails.class, tags={ "店铺信息交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Storedetails.class) })
    @RequestMapping(value = "/store/details",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Storedetails> storedetails(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "fid", required = true) String fid);


    @ApiOperation(value = "", nickname = "storeuser", notes = "店铺出租情况", response = StoreList.class, tags={ "店铺出租情况", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = StoreList.class) })
    @RequestMapping(value = "/store/used",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StoreList> storeuser(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "floor", required = true) Integer floor);


    @ApiOperation(value = "", nickname = "translist", notes = "店铺转化率排行", response = Translist.class, tags={ "店铺信息交互", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Translist.class) })
    @RequestMapping(value = "/store/translist",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Translist> translist(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "time", required = true) String time);

}
